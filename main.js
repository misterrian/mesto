(()=>{"use strict";var e={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__submit-button",inputErrorClass:"popup__input_type_error"};function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var n=function(){function e(t,n,r,o,i,a){var u=n._id,c=n.name,s=n.link,l=n.owner,f=n.likes;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._ownId=t,this._id=u,this._name=c,this._link=s,this._ownerId=l._id,this._likes=f,this._cardSelector=r,this._handleCardClick=o,this._handleRemoveButtonClick=i,this._handleLikeButtonClick=a}var n,r;return n=e,(r=[{key:"generateCard",value:function(){this._element=this._getTemplate(),this._setEventListeners(),this._element.querySelector(".element__title").textContent=this._name;var e=this._element.querySelector(".element__picture");return e.alt=this._name,e.src=this._link,this._ownId===this._ownerId&&this._element.querySelector(".element__remove").classList.remove("element__remove_hidden"),this._renderLikes(),this._element}},{key:"getCardId",value:function(){return this._id}},{key:"removeCard",value:function(){this._element.remove()}},{key:"isLiked",value:function(){var e=this;return this._likes.find((function(t){return t._id===e._ownId}))}},{key:"updateLikes",value:function(e){var t=e.likes;this._likes=t,this._renderLikes()}},{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0)}},{key:"_setEventListeners",value:function(){this._element.querySelector(".element__picture").addEventListener("click",this._handleCardClick),this._element.querySelector(".element__remove").addEventListener("click",this._handleRemoveButtonClick),this._element.querySelector(".element__like").addEventListener("click",this._handleLikeButtonClick)}},{key:"_renderLikes",value:function(){var e=this._element.querySelector(".element__like");this.isLiked()?e.classList.add("element__like_active"):e.classList.remove("element__like_active"),this._element.querySelector(".element__like-counter").textContent=this._likes.length}}])&&t(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),e}();function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(){function e(t){var n,r,o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=function(e){"Escape"===e.key&&o.close()},(n="_handleEscClose")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this._popup=document.querySelector(t)}var t,n;return t=e,(n=[{key:"open",value:function(){document.addEventListener("keydown",this._handleEscClose),this._popup.classList.add("popup_opened")}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("click",(function(t){return e._handlePopupClick(t)}))}},{key:"_handlePopupClick",value:function(e){var t=e.target.classList;(t.contains("popup")||t.contains("popup__close-icon"))&&this.close()}}])&&r(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(){return u="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=c(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},u.apply(this,arguments)}function c(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=f(e)););return e}function s(e,t){return s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},s(e,t)}function l(e,t){if(t&&("object"===i(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function f(e){return f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},f(e)}var p=function(t){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&s(e,t)}(p,t);var n,r,o,i,c=(o=p,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=f(o);if(i){var n=f(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return l(this,e)});function p(t,n){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,p),(r=c.call(this,t))._submitCallback=n,r._form=r._popup.querySelector(e.formSelector),r._inputFields=Array.from(r._form.querySelectorAll(e.inputSelector)),r}return n=p,(r=[{key:"close",value:function(){u(f(p.prototype),"close",this).call(this),this._form.reset()}},{key:"setEventListeners",value:function(){var e=this;this._form.addEventListener("submit",(function(t){t.preventDefault(),e._submitCallback(e._getInputValues()),e.close()})),u(f(p.prototype),"setEventListeners",this).call(this)}},{key:"setInputValues",value:function(e){this._inputFields.forEach((function(t){var n=e[t.name];n&&(t.value=n)}))}},{key:"getForm",value:function(){return this._form}},{key:"_getInputValues",value:function(){var e={};return this._inputFields.forEach((function(t){return e[t.name]=t.value})),e}}])&&a(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),p}(o);function h(e){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},h(e)}function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(){return d="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=v(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},d.apply(this,arguments)}function v(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=m(e)););return e}function _(e,t){return _=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},_(e,t)}function b(e,t){if(t&&("object"===h(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function m(e){return m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},m(e)}var k=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&_(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=m(r);if(o){var n=m(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return b(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._photo=t._popup.querySelector(".popup__photo"),t._name=t._popup.querySelector(".popup__name-preview"),t}return t=a,(n=[{key:"open",value:function(e){var t=e.name,n=e.link;this._photo.src=n,this._photo.alt=t,this._name.textContent=t,d(m(a.prototype),"open",this).call(this)}}])&&y(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(o);function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var g=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=t,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderItems",value:function(e){e.forEach(this._renderer)}},{key:"addItem",value:function(e,t){t?this._container.prepend(e):this._container.append(e)}}])&&w(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var O=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._id=0,this._name=document.querySelector(t),this._about=document.querySelector(n),this._avatar=document.querySelector(r)}var t,n;return t=e,(n=[{key:"getOwnId",value:function(){return this._id}},{key:"getUserInfo",value:function(){return{name:this._name.textContent,about:this._about.textContent}}},{key:"setUserInfo",value:function(e){var t=e._id,n=e.name,r=e.about;this._id=t,this._name.textContent=n,this._about.textContent=r}},{key:"getAvatar",value:function(){return this._avatar.src}},{key:"setAvatar",value:function(e){this._avatar.src=e}}])&&S(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var C=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._validatorSettings=t,this._form=n,this._inputFields=Array.from(this._form.querySelectorAll(this._validatorSettings.inputSelector)),this._submitButton=this._form.querySelector(this._validatorSettings.submitButtonSelector)}var t,n;return t=e,(n=[{key:"enableValidation",value:function(){this._setEventListeners()}},{key:"initValidationState",value:function(){var e=this;this._inputFields.forEach((function(t){return e._hideInputError(t)})),this._toggleSubmitButtonState()}},{key:"_setEventListeners",value:function(){var e=this;this._toggleSubmitButtonState(),this._inputFields.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleSubmitButtonState()}))}))}},{key:"_toggleSubmitButtonState",value:function(){this._areAllInputsValid()?(this._submitButton.removeAttribute("disabled"),this._submitButton.classList.remove("popup__submit-button_disabled")):(this._submitButton.setAttribute("disabled",""),this._submitButton.classList.add("popup__submit-button_disabled"))}},{key:"_areAllInputsValid",value:function(){return this._inputFields.every((function(e){return e.validity.valid}))}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_showInputError",value:function(e,t){var n=this._form.querySelector(".".concat(e.id,"-error"));e.classList.add(this._validatorSettings.inputErrorClass),n.textContent=t}},{key:"_hideInputError",value:function(e){var t=this._form.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._validatorSettings.inputErrorClass),t.textContent=""}}])&&E(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function j(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status,", ").concat(e.statusText))}function L(e){console.log(e)}function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var I=function(){function e(t){var n=t.userUrl,r=t.baseUrl,o=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userUrl=n,this._baseUrl=r,this._headers=o}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return fetch("".concat(this._userUrl),{headers:this._headers}).then(j)}},{key:"getInitialCards",value:function(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then(j)}},{key:"saveAvatar",value:function(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(j)}},{key:"saveProfile",value:function(e){return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(j)}},{key:"addCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then(j)}},{key:"removeCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then(j)}},{key:"addLike",value:function(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e,"/likes"),{method:"PUT",headers:this._headers}).then(j)}},{key:"removeLike",value:function(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e,"/likes"),{method:"DELETE",headers:this._headers}).then(j)}}])&&P(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function R(e){return R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},R(e)}function q(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function T(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function U(){return U="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=B(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},U.apply(this,arguments)}function B(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=V(e)););return e}function x(e,t){return x=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},x(e,t)}function A(e,t){if(t&&("object"===R(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function V(e){return V=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},V(e)}var F=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&x(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=V(r);if(o){var n=V(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return A(this,e)});function a(){return q(this,a),i.apply(this,arguments)}return t=a,(n=[{key:"setEventListeners",value:function(){var e=this;this._popup.querySelector(".popup__submit-button").addEventListener("click",(function(){e._submitCallback(),e.close()})),U(V(a.prototype),"setEventListeners",this).call(this)}},{key:"open",value:function(e){this._submitCallback=e,U(V(a.prototype),"open",this).call(this)}}])&&T(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(o),D=new O(".profile-info__title",".profile-info__subtitle",".profile__avatar-photo"),N=new p("#avatar-popup",(function(e){var t=Z(N.getForm());X.saveAvatar(e).then((function(e){return D.setAvatar(e.avatar)})).catch(L).finally(t)}));N.setEventListeners();var J=new C(e,N.getForm());J.enableValidation(),document.querySelector(".profile__avatar-button").addEventListener("click",(function(){N.setInputValues({avatar:D.getAvatar()}),J.initValidationState(),N.open()}));var H=new p("#profile-popup",(function(e){var t=Z(H.getForm());X.saveProfile(e).then((function(e){return D.setUserInfo(e)})).catch(L).finally(t)}));H.setEventListeners();var z=new C(e,H.getForm());z.enableValidation(),document.querySelector(".profile-info__edit-button").addEventListener("click",(function(){H.setInputValues(D.getUserInfo()),z.initValidationState(),H.open()}));var M=new p("#new-place-popup",(function(e){var t=Z(M.getForm());X.addCard(e).then((function(e){return W.addItem(Y(e),!0)})).catch(L).finally(t)}));M.setEventListeners();var G=new C(e,M.getForm());G.enableValidation(),document.querySelector(".profile__add-button").addEventListener("click",(function(){G.initValidationState(),M.open()}));var K=new F("#remove-card-popup");K.setEventListeners();var Q=new k("#preview-popup");Q.setEventListeners();var W=new g((function(e){return W.addItem(Y(e),!1)}),".elements"),X=new I({userUrl:"https://nomoreparties.co/v1/cohort-41/users/me",baseUrl:"https://mesto.nomoreparties.co/v1/cohort-41",headers:{authorization:"9d97c63b-334e-41b1-ad1d-f8e460dd9ec6","Content-Type":"application/json"}});function Y(e){var t=new n(D.getOwnId(),e,"#element-template",(function(){return Q.open(e)}),(function(){return K.open((function(){X.removeCard(t.getCardId()).then((function(){return t.removeCard()})).catch(L)}))}),(function(){(t.isLiked()?X.removeLike(t.getCardId()):X.addLike(t.getCardId())).then((function(e){return t.updateLikes(e)})).catch(L)}));return t.generateCard()}function Z(e){var t=e.querySelector(".popup__submit-button"),n=t.textContent;return t.textContent="Сохранение...",function(){return t.textContent=n}}X.getUserInfo().then((function(e){D.setAvatar(e.avatar),D.setUserInfo(e)})).catch(L),X.getInitialCards().then((function(e){return W.renderItems(e)})).catch(L)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,